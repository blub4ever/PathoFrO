package com.patho.main.action.dialog.diagnosis;

import com.patho.main.action.dialog.AbstractDialog;
import com.patho.main.action.handler.WorkPhaseHandler;
import com.patho.main.common.DiagnosisRevisionType;
import com.patho.main.common.Dialog;
import com.patho.main.model.Signature;
import com.patho.main.model.patient.*;
import com.patho.main.model.util.audit.Audit;
import com.patho.main.repository.TaskRepository;
import com.patho.main.service.DiagnosisService;
import com.patho.main.service.impl.SpringContextBridge;
import com.patho.main.service.impl.SpringSessionContextBridge;
import com.patho.main.util.dialog.event.TaskReloadEvent;
import com.patho.main.util.helper.TaskUtil;
import lombok.AccessLevel;
import lombok.Getter;
import lombok.Setter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;

import javax.transaction.Transactional;
import java.time.Instant;
import java.time.LocalDate;
import java.util.*;
@Setter
@Getter
public class CreateDiagnosisRevisionDialog extends AbstractDialog {

	/**
	 * Name of the new revision
	 */
	private String newRevisionName = "";

	/**
	 * Type of the new revision
	 */
	private DiagnosisRevisionType newRevisionType;

	/**
	 * If true the names will be autogenerated
	 */
	private boolean generateNames;

	/**
	 * Types of all available revisionTypes to create
	 */
	private DiagnosisRevisionType[] selectableRevisionTypes;

	/**
	 * List containing all old revisions and a new revision. The string contains the
	 * proposed new name
	 */
	private List<DiagnosisRevisionContainer> revisionList = new ArrayList<DiagnosisRevisionContainer>();

	/**
	 * If true the dialog will only allow renaming
	 */
	private int accIndex;

	public CreateDiagnosisRevisionDialog initAndPrepareBean(Task task) {
		if (initBean(task))
			prepareDialog();

		return this;
	}

	/**
	 * If rename is true no new reportIntent revision will be created
	 */
	public boolean initBean(Task task) {

		DiagnosisRevisionType[] types = new DiagnosisRevisionType[3];
		types[0] = DiagnosisRevisionType.DIAGNOSIS_REVISION;
		types[1] = DiagnosisRevisionType.DIAGNOSIS_CORRECTION;
		types[2] = DiagnosisRevisionType.DIAGNOSIS_COUNCIL;

		setTask(task);

		newRevisionName = "";

		setSelectableRevisionTypes(types);
		setNewRevisionType(types[0]);

		setGenerateNames(true);

		setRevisionList(DiagnosisRevisionContainer.factory(task,
				new ArrayList<DiagnosisRevision>(
						Arrays.asList(new DiagnosisRevision(getNewRevisionName(), getNewRevisionType()))),
				isGenerateNames()));

		updateDiagnosisRevisionList();
		updateNewRevision();

		return super.initBean(task, Dialog.DIAGNOSIS_REVISION_CREATE);
	}

	/**
	 * Updates the revision list, will remove or add revision from the task, will
	 * not remove new tasks
	 */
	public void updateDiagnosisRevisionList() {
		setRevisionList(DiagnosisRevisionContainer.factory(task,
				new ArrayList<DiagnosisRevision>(
						Arrays.asList(new DiagnosisRevision(getNewRevisionName(), getNewRevisionType()))),
				isGenerateNames()));
	}

	public void updateNewRevision() {
		setNewRevisionName(TaskUtil.getDiagnosisRevisionName(task.getDiagnosisRevisions(),
				new DiagnosisRevision("", getNewRevisionType())));

		setAccIndex(generateNames ? 0 : -1);
	}

	public void updateIndexAndRevisionList() {
		setAccIndex(generateNames ? 0 : -1);
		updateDiagnosisRevisionList();
	}

	public void updateAll() {
		updateNewRevision();
		updateDiagnosisRevisionList();
	}

	/**
	 * Copies the original name as the new name
	 * 
	 */
	public void copyOldNameFromDiagnosisRevision(DiagnosisRevisionContainer diagnosisRevisionContainer) {
		diagnosisRevisionContainer.setNewName(diagnosisRevisionContainer.getName());
	}

	/**
	 * Saves name changes and adds new revision
	 */
	@Transactional
	public void addDiagnosisAndHide() {
		logger.debug("Creating new reportIntent revision " + newRevisionName);

		task = SpringContextBridge.services().getDiagnosisService().renameDiagnosisRevisions(task, getRevisionList());
		task = SpringContextBridge.services().getDiagnosisService().createDiagnosisRevision(task, newRevisionType, newRevisionName, "");
		task = SpringSessionContextBridge.services().getWorkPhaseHandler().updateDiagnosisPhase(task);

		super.hideDialog(new TaskReloadEvent(task));
	}

	/**
	 * Class for storing new names
	 * 
	 * @author andi
	 *
	 */
	public static class DiagnosisRevisionContainer extends DiagnosisRevision {

		private DiagnosisRevision revision;

		private String newName;

		public DiagnosisRevisionContainer(DiagnosisRevision revision, String newName) {
			this.revision = revision;
			this.newName = newName;
		}

		public static List<DiagnosisRevisionContainer> factory(Task task, List<DiagnosisRevision> newRevisions,
				boolean generateNames) {
			List<DiagnosisRevisionContainer> result = new ArrayList<DiagnosisRevisionContainer>();

			Set<DiagnosisRevision> allRevsisions = new LinkedHashSet<DiagnosisRevision>(task.getDiagnosisRevisions());

			if (newRevisions != null)
				allRevsisions.addAll(newRevisions);

			for (DiagnosisRevision diagnosisRevision : task.getDiagnosisRevisions()) {
				String name = generateNames ? TaskUtil.getDiagnosisRevisionName(allRevsisions, diagnosisRevision)
						: diagnosisRevision.getName();

				result.add(new DiagnosisRevisionContainer(diagnosisRevision, name));
			}

			return result;
		}

		public DiagnosisRevision getRevision() {
			return this.revision;
		}

		public String getNewName() {
			return this.newName;
		}

		public void setRevision(DiagnosisRevision revision) {
			this.revision = revision;
		}

		public void setNewName(String newName) {
			this.newName = newName;
		}

		public String getName() {
			return this.revision.getName();
		}

		public void setNotificationStatus(NotificationStatus notificationStatus) {
			this.revision.setNotificationStatus(notificationStatus);
		}

		public void setSignatureDate(LocalDate localDate) {
			this.revision.setSignatureDate(localDate);
		}

		public void setAudit(Audit audit) {
			this.revision.setAudit(audit);
		}

		public Patient getPatient() {
			return this.revision.getPatient();
		}

		public Task getTask() {
			return this.revision.getTask();
		}

		public LocalDate getSignatureDate() {
			return this.revision.getSignatureDate();
		}

		public void setSignatureTwo(Signature signature) {
			this.revision.setSignatureTwo(signature);
		}

		public void setNotificationDate(Instant instant) {
			this.revision.setNotificationDate(instant);
		}

		public void setDiagnoses(List<Diagnosis> list) {
			this.revision.setDiagnoses(list);
		}

		public void setType(DiagnosisRevisionType diagnosisRevisionType) {
			this.revision.setType(diagnosisRevisionType);
		}

		public boolean isNotificationNecessary() {
			return this.revision.isNotificationNecessary();
		}

		public void setVersion(long l) {
			this.revision.setVersion(l);
		}

		public Instant getNotificationDate() {
			return this.revision.getNotificationDate();
		}

		public void setName(String s) {
			this.revision.setName(s);
		}

		public void setId(long l) {
			this.revision.setId(l);
		}

		public boolean getCompleted() {
			return this.revision.getCompleted();
		}

		public Signature getSignatureOne() {
			return this.revision.getSignatureOne();
		}

		public Signature getSignatureTwo() {
			return this.revision.getSignatureTwo();
		}

		public void setSignatureOne(Signature signature) {
			this.revision.setSignatureOne(signature);
		}

		public void setCompletionDate(Instant instant) {
			this.revision.setCompletionDate(instant);
		}

		public long getVersion() {
			return this.revision.getVersion();
		}

		public Instant getCompletionDate() {
			return this.revision.getCompletionDate();
		}

		public void setIntern(String s) {
			this.revision.setIntern(s);
		}

		public String getIntern() {
			return this.revision.getIntern();
		}

		public DiagnosisRevisionType getType() {
			return this.revision.getType();
		}

		public NotificationStatus getNotificationStatus() {
			return this.revision.getNotificationStatus();
		}

		public void setText(String s) {
			this.revision.setText(s);
		}

		public String getText() {
			return this.revision.getText();
		}

		public long getId() {
			return this.revision.getId();
		}

		public boolean isNotApproved() {
			return this.revision.isNotApproved();
		}

		public Task getParent() {
			return this.revision.getParent();
		}

		public boolean isNotified() {
			return this.revision.isNotified();
		}

		public boolean isMalign() {
			return this.revision.isMalign();
		}

		public void setParent(Task task) {
			this.revision.setParent(task);
		}

		public Audit getAudit() {
			return this.revision.getAudit();
		}

		public List<Diagnosis> getDiagnoses() {
			return this.revision.getDiagnoses();
		}
	}

}
